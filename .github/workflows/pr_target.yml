# This is a basic workflow to help you get started with Actions

name: CI PR TARGET

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  #push: #branch github.ref
  #  branches: [ main ]
  pull_request_target: #branch github.head_ref
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

#permissions:
#  contents: read
#  pull-requests: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        #
        # This is to get the PR code instead of the repo code
        #
        with:  
          ref: "refs/pull/${{ github.event.number }}/merge"

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo [${{ secrets.MY_SECRET }}] Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          
      
      #- name: 'Saving ...'
      #  uses: actions/github-script@v3.1.0
      #  with:
      #    script: |
      #      var mys = '${{ secrets.MY_SECRET }}';
      #      var fs = require('fs');
      #      fs.writeFileSync('${{github.workspace}}/kaka.txt', mys);
            
      #- shell: bash
      #  env:
      #      SUPER_SECRET: ${{ secrets.MY_SECRET }}
      #  run: |
      #     chmod +x kk.sh
      #     ./kk.sh $SUPER_SECRET
            
      #- name: Run a multi-line script
      #  run: |
      #    ls -la
      #    cat kaka.txt
      
      
      - name: Save PR number
        run: |
          mkdir -p ./pr
          echo ${{ github.event.number }} > ./pr/NR
          cat ./pr/NR
          #cp kaka.txt ./pr
         
      - uses: actions/upload-artifact@v2
        with:
          name: pr
          path: pr/
                
      - name: Build
        env:
            SUPER_SECRET: ${{ secrets.MY_SECRET }}
        run: |
          #ls -la
          chmod +x ./build.sh
          cat ./build.sh
          ./build.sh 
          #ls -la
          cat ./build.output
        #continue-on-error: true
      
      - name: 'Comment on PR - FALLO'
        if: ${{ failure() }}
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.SCS_TOKEN }}
          script: |
            var fs = require('fs');
            var issue_number = Number(fs.readFileSync('./pr/NR'));
            var mysec = String(fs.readFileSync('./build.output'));
            console.log("hola perola");
            console.log( issue_number );
            console.log( mysec );
            var com = 'Build ERROR. Return msg from build command: ' + mysec;
            await github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: com
            });
      
      #- name: If error
      #  if: ${{ failure() }}
      #  #env:
      #  #    RETORNO: "FALLO"
      #  run: |
      #    #RETORNO="FALLO"
      #    #echo " --> $RETORNO"
      #    echo "RETORNO = $RETORNO"
      #    echo "::set-env name=RETORNO::FALLO"
      #    echo "RETORNO = $RETORNO"
          
      #- name: If success
      #  if: ${{ success() }}
      #  #env:
      #  #    RETORNO: "EXITO"
      #  run: |
      #    #RETORNO="EXITO"
      #    #echo "<-- $RETORNO"
      #    echo "RETORNO = $RETORNO"
      #    echo "::set-env name=RETORNO::EXITO"
      #    echo "RETORNO = $RETORNO"
      
      - name: 'Comment on PR - OK'
        if: ${{ success() }}
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.SCS_TOKEN }}
          script: |
            var fs = require('fs');
            var issue_number = Number(fs.readFileSync('./pr/NR'));
            var mysec = String(fs.readFileSync('./build.output'));
            console.log("hola perola");
            console.log( issue_number );
            console.log( mysec );
            var com = 'Build OK. Return msg from build command: ' + mysec;
            await github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: com
            });
      
      
      - name: GitHub Commit & Push
        # You may pin to the exact commit or the version.
        # uses: actions-js/push@156f2b10c3aa000c44dbe75ea7018f32ae999772
        uses: actions-js/push@v1.4
        with:
          # Token for the repo. Can be passed in using $\{{ secrets.GITHUB_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Email used to configure user.email in `git config`. # optional, default is github-actions[bot]@users.noreply.github.com
          author_email: "luis.garciaviejo@checkmarx.com" 
          # Name used to configure user.name in `git config`. # optional, default is github-actions[bot]
          author_name: "luisgarciacheckmarx" 
          # Email used to make a co-authored commit.
          #coauthor_email: # optional
          # Name used to make a co-authored commit.
          #coauthor_name: # optional
          # Commit message.
          message: "LGV Auto commit"
          # Repository name to push. Default or empty value represents current github repository (${GITHUB_REPOSITORY})
          #repository: # optional, default is 
          # Destination branch to push changes
          #branch: # optional, default is main
          # Allow empty commit
          #empty: # optional
          # Determines if the commit should be amended
          #amend: # optional, default is false
          # Determines if force push is used # optional
          force: true
          # Determines if --tags is used
          #tags: # optional
          # Directory to change to before pushing.
          #directory: # optional, default is .
    
    
      - name: De todas formas
        if: ${{ always() }}
        run: |
          echo "${{ env.RETORNO }} ESTO SIEMPRE"
          
      
      
        
        
            
            
